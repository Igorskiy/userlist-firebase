{"version":3,"sources":["store/reducers/popupReducer.js","store/reducers/usersReducer.js","store/reducers/inputReducer.js","store/selectors.js","misc/helpers.js","store/reducers/userReducer.js","store/thunks.js","components/RegistrationForm.js","components/UsersData.js","components/EditForm.js","components/User.js","components/UsersTable.js","store/index.js","App.js","index.js"],"names":["initialState","isPopupShown","popupReducer","state","action","type","setUsers","users","filter","usersReducer","setIsActive","actionStatus","setPhoneNumber","phoneNumber","setSurname","surname","setName","name","inputReducer","trim","getName","inputSelectors","input","getSurname","getPhoneNumber","getShowPopup","popupSelectors","popup","getActionStatus","getUsers","usersSelectors","getIsFiltered","numericPattern","NoNumericPattern","showInvalidData","values","invalidDataList","search","push","join","checkAllDataValid","debounce","f","delay","timer","args","clearTimeout","setTimeout","userReducer","user","addNewUser","id","dispatch","firebase","database","ref","set","addUser","alert","editUser","update","updateUser","connect","isActive","selectors","value","inputActions","cancel","debouncedSetName","debouncedSetSurname","debouncedSetPhoneNumber","className","placeholder","onChange","e","target","onClick","Date","now","to","inputsReset","useEffect","defaultValue","headers","map","title","Fragment","key","role","aria-label","path","render","header","togglePopup","filterUsers","showUsers","userRef","on","snap","Object","val","orderByChild","equalTo","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","child","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.79eac580.chunk.js","sourcesContent":["const TOGGLE_POPUP = 'TOGGLE_POPUP';\n\nexport const togglePopup = () => ({ type: TOGGLE_POPUP });\n\nexport const getPopupShow = state => state.isPopupShown;\n\nconst initialState = {\n isPopupShown: false,\n}\n\nconst popupReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case TOGGLE_POPUP:\n        return {\n          ...state,\n          isPopupShown: !state.isPopupShown,\n        };\n      default: return state;\n    }\n  };\n  \n  export default popupReducer;","const SET_USERS = 'SET_USERS';\nconst FILTER_USERS = 'FILTER_USERS';\n\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users,\n});\n\nexport const filterUsers = filter => ({\n  type: FILTER_USERS,\n  filter,\n});\n\nexport const getUsersList = state => state.users;\nexport const getIsFilteredUsers = state => state.filter;\n\nconst initialState = {\n  users: [],\n  filter: 'all',\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USERS:\n      return {\n        ...state,\n       users: action.users,\n      }\n    case FILTER_USERS:\n      return {\n        ...state,\n        filter: action.filter,\n      };\n    default: return state;\n  }\n};\n\nexport default usersReducer;\n","const SET_NAME = 'SET_NAME';\nconst SET_SURNAME = 'SET_SURNAME';\nconst SET_PHONE_NUMBER = 'SET_PHONE_NUMBER';\nconst SET_IS_ACTIVE = 'SET_IS_ACTIVE';\nconst INPUTS_RESET = 'INPUTS_RESET';\n\nexport const inputsReset = () => ({ type: INPUTS_RESET });\n\nexport const setIsActive = actionStatus => ({\n  type: SET_IS_ACTIVE,\n  actionStatus,\n});\n\nexport const setPhoneNumber = phoneNumber => ({\n  type: SET_PHONE_NUMBER,\n  phoneNumber,\n});\nexport const setSurname = surname => ({\n  type: SET_SURNAME,\n  surname,\n});\nexport const setName = name => ({\n  type: SET_NAME,\n  name,\n});\n\nexport const getPhoneNumber = state => state.phoneNumber;\nexport const getName = state => state.name;\nexport const getSurname = state => state.surname;\nexport const getIsActive = state => state.actionStatus;\n\nconst initialState = {\n  name: '',\n  surname: '',\n  phoneNumber: '',\n  actionStatus: 'active',\n};\n\nconst inputReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NAME:\n      return {\n        ...state,\n        name: action.name.trim(),\n      };\n    case SET_SURNAME:\n      return {\n        ...state,\n        surname: action.surname.trim(),\n      };\n    case SET_PHONE_NUMBER:\n      return {\n        ...state,\n        phoneNumber: action.phoneNumber.trim(),\n      };\n\n    case SET_IS_ACTIVE:\n      return {\n        ...state,\n        actionStatus: action.actionStatus,\n      };\n    case INPUTS_RESET: \n      return {\n        name: '',\n        surname: '',\n        phoneNumber: '',\n        actionStatus: 'active',\n      }\n    default: return state;\n  }\n};\n\nexport default inputReducer;\n","import * as inputSelectors from './reducers/inputReducer';\nimport * as usersSelectors  from './reducers/usersReducer';\nimport * as popupSelectors from './reducers/popupReducer';\n\nexport const getName = state => inputSelectors.getName(state.input);\nexport const getSurname = state => inputSelectors.getSurname(state.input);\nexport const getPhoneNumber = state => inputSelectors.getPhoneNumber(state.input);\nexport const getShowPopup = state => popupSelectors.getPopupShow(state.popup);\nexport const getActionStatus = state => inputSelectors.getIsActive(state.input);\nexport const getUsers = state => usersSelectors.getUsersList(state.users);\nexport const getIsFiltered = state => usersSelectors.getIsFilteredUsers(state.users);\n","const numericPattern = /(\\d)+/;\nconst NoNumericPattern = /(\\D)+/;\n\nexport const showInvalidData = (values) => {\n  const invalidDataList = [];\n  const name = values.name;\n  const surname = values.surname;\n  const phoneNumber = values.phoneNumber;\n\n  if(!phoneNumber || phoneNumber.search(NoNumericPattern) !== -1) {\n    invalidDataList.push('номер телефона');\n  }\n  if(!name || name.search(numericPattern) !== -1) {\n    invalidDataList.push('имя');\n  }\n  if(!surname || surname.search(numericPattern) !== -1) {\n    invalidDataList.push('фамилия')\n  }\n\n  return invalidDataList.join(', ');\n};\n\n\nexport const checkAllDataValid = (values) => {\n  const name = values.name;\n  const surname = values.surname;\n  const phoneNumber = values.phoneNumber;\n\n  return (\n    (phoneNumber && phoneNumber.search(NoNumericPattern) === -1)\n    &&\n    (name && name.search(numericPattern) === -1)\n    &&\n    (surname && surname.search(numericPattern) === -1)\n  )\n};\n\nexport const debounce = (f, delay) => {\n  let timer;\n\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => f(...args), delay);\n  };\n};","import firebase from 'firebase';\n\nconst ADD_USER = 'ADD_USER';\nconst UPDATE_USER = 'UPDATE_USER';\n\nexport const updateUser = (user, id) => ({\n  type: UPDATE_USER,\n  user: firebase\n  .database().ref('users/' + id)\n  .update({ ...user }),\n})\n\nexport const addUser = (user, id) => ({\n  type: ADD_USER,\n  user: firebase\n  .database().ref('users/' + id)\n  .set({ ...user, id }),\n});\n\nexport const getUser = state => state.user;\n\n\n\nconst userReducer = (state = null, action) => {\n  switch (action.type) {\n    case ADD_USER:\n      return action.user\n    case UPDATE_USER:\n      return action.user \n    default: return state;\n  }\n};\n\nexport default userReducer;\n","import * as inputActions from './reducers/inputReducer';\nimport { checkAllDataValid, showInvalidData } from '../misc/helpers'\nimport { setUsers } from './reducers/usersReducer';\nimport { addUser, updateUser } from './reducers/userReducer';\nimport { togglePopup } from './reducers/popupReducer';\nimport { userRef } from '../index';\n\nexport const cancel = () => dispatch => {\n  dispatch(inputActions.inputsReset());\n  dispatch(togglePopup());\n}\n\nexport const addNewUser = (values, id) => dispatch => {\n  if (checkAllDataValid(values)) {\n  dispatch(addUser(values, id));\n  dispatch(inputActions.inputsReset());\n  dispatch(togglePopup());\n  } \n  else {\n    alert(\n    `Данные введены неправильно, пожалуйста проверьте корректность данных:\n      ${showInvalidData(values)}`);\n  }\n};\n\nexport const editUser = (values, id) => dispatch => {\n  if (checkAllDataValid(values)) {\n    dispatch(updateUser(values, id));\n  } \n  else alert(\n    `Данные введены неправильно, пожалуйста проверьте корректность данных:\n      ${showInvalidData(values)}\n    `\n   );\n\n  dispatch(inputActions.inputsReset());\n};\n\nexport const showUsers = (filter) => dispatch => {\n  switch(filter) {\n    case 'all':\n      return userRef\n      .on('value', snap =>(\n        dispatch(setUsers(Object.values(snap.val())))\n      ));\n    case 'active':\n      return userRef\n      .orderByChild('isActive')\n      .equalTo('active')\n      .on('value', snap =>(\n        snap.val() \n        ? dispatch(setUsers(Object.values(snap.val())))\n        : dispatch(setUsers([]))\n      ));\n    case 'inactive':\n      return userRef\n      .orderByChild('isActive')\n      .equalTo('inactive')\n      .on('value', snap =>(\n        snap.val() \n        ? dispatch(setUsers(Object.values(snap.val())))\n        : dispatch(setUsers([]))\n      ));\n    default: return ;\n  }\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as inputActions from '../store/reducers/inputReducer';\nimport * as selectors from '../store/selectors';\nimport { addNewUser, cancel } from '../store/thunks';\nimport { debounce } from '../misc/helpers';\n\nconst RegisterForm = ({\n  setSurname,\n  setName,\n  setPhoneNumber,\n  setIsActive,\n  isActive,\n  name,\n  surname,\n  phoneNumber,\n  addNewUser,\n  cancel,\n}) => {\n\n  const debouncedSetName = debounce(setName, 300);\n  const debouncedSetSurname = debounce(setSurname, 300);\n  const debouncedSetPhoneNumber = debounce(setPhoneNumber, 300);\n\n  return (\n    <div className=\"popup\">\n      <div className=\"registration-form form\">\n        <h1 className =\"registration-form__tilte title\">\n          <span>Введите данные для нового пользователя</span>\n        </h1>\n        <div className=\"registration-form__inputs inputs\">\n          <label className=\"label\">\n            <span>Имя:</span>\n            <input\n              type=\"text\"\n              className=\"inputs__input\"\n              placeholder=\"имя пользователя\"\n              onChange={e => debouncedSetName(e.target.value)}\n            />\n          </label>\n          <label className=\"label\">\n            <span>Фамилия:</span>\n            <input\n              type=\"text\"\n              className=\"inputs__input\"\n              placeholder=\"фамилия пользователя\"\n              onChange={e => debouncedSetSurname(e.target.value)}\n            />\n          </label>\n          <label className=\"label\">\n            <span>Моб. телефон:</span>\n            <input\n              type=\"telephone\"\n              className=\"inputs__input\"\n              placeholder=\"моб. номер пользователя\"\n              onChange={e => debouncedSetPhoneNumber(e.target.value)}\n            />\n          </label>\n          <label className=\"label\">\n            <span>Is active:</span>\n            <select\n              className=\"inputs__input\"\n              value={isActive}\n              onChange={e => setIsActive(e.target.value)}\n            >\n              <option value=\"active\">Active</option>\n              <option value=\"inactive\">Inactive</option>\n            </select>\n          </label>\n\n          <button\n            className=\" submit-button button\"\n            type=\"button\"\n            onClick={()=> addNewUser({\n              name,\n              surname,\n              phoneNumber,\n              isActive,\n            },Date.now())}\n          >\n            Подтвердить\n          </button>\n          <button\n            className=\" close-button button\"\n            type=\"button\"\n            onClick={() => cancel()}\n          >\n            Отмена\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\nconst mapStateToProps = state => ({\n  isActive: selectors.getActionStatus(state),\n  name: selectors.getName(state),\n  surname: selectors.getSurname(state),\n  phoneNumber: selectors.getPhoneNumber(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  setPhoneNumber: value => dispatch(inputActions.setPhoneNumber(value)),\n  setName: value => dispatch(inputActions.setName(value)),\n  setSurname: value => dispatch(inputActions.setSurname(value)),\n  setIsActive: value => dispatch(inputActions.setIsActive(value)),\n  addNewUser: (value, id) => dispatch(addNewUser(value, id)),\n  cancel: () => dispatch(cancel()),\n});\n\nRegisterForm.propTypes={\n  name: PropTypes.string.isRequired,\n  surname: PropTypes.string.isRequired,\n  phoneNumber: PropTypes.string.isRequired,\n  isActive: PropTypes.string.isRequired,\n  setIsActive: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  setPhoneNumber: PropTypes.func.isRequired,\n  setSurname: PropTypes.func.isRequired,\n  addNewUser:PropTypes.func.isRequired,\n  cancel: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as selectors from '../store/selectors';\n\nconst UsersData = ({ user }) => (\n  <div className=\"popup\">\n    <div className=\"display-form form\">\n      <h1 className=\"display-form__tilte title\">\n        <div>данные пользователя</div>\n        <div className=\"display-form__username username\">{user.name}</div>\n      </h1>\n      <div className=\"display-form__inputs inputs\">\n        <label className=\"label\">\n          <span>Имя:</span>\n          <span>{user.name}</span>\n        </label>\n        <label className=\"label\">\n          <span>Фамилия:</span>\n          <span>{user.surname}</span>\n        </label>\n        <label className=\"label\">\n          <span>Моб. телефон:</span>\n          {user.phoneNumber}\n        </label>\n        <label className=\"label\">\n          <span>Статус:</span>\n          {user.isActive}\n        </label>\n        <NavLink\n          className=\"close-button button\"\n          to=\"/users\"\n        >\n          Закрыть\n        </NavLink>\n      </div>\n    </div>\n  </div>\n);\nconst mapStateToProps = state => ({\n  isActive: selectors.getActionStatus(state),\n  name: selectors.getName(state),\n  surname: selectors.getSurname(state),\n  phoneNumber: selectors.getPhoneNumber(state),\n});\n\nUsersData.propTypes={\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    surname: PropTypes.string.isRequired,\n    phoneNumber: PropTypes.string.isRequired,\n    isActive: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n};\n\nexport default connect(mapStateToProps)(UsersData);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as inputActions from '../store/reducers/inputReducer';\nimport * as selectors from '../store/selectors';\nimport { editUser } from '../store/thunks';\n\nconst EditForm = ({\n  setSurname,\n  setName,\n  setPhoneNumber,\n  setIsActive,\n  isActive,\n  name,\n  surname,\n  phoneNumber,\n  user,\n  editUser,\n  inputsReset,\n}) => {\n  useEffect(\n    () => {\n      setIsActive(user.isActive)\n    }, [setIsActive, user.isActive]\n  );\n\n    return (\n    <div className=\"popup\">\n      <div className=\"edit-form form\">\n        <h1 className=\"edit-form__tilte title\">\n          <div>Редактировать данные пользователя </div>\n          <div className=\"edit-form__username username\">{user.name}</div>\n        </h1>\n        <div className=\"edit-form__inputs inputs\">\n          <label className=\"label\">\n            <span>Имя:</span>\n            <input\n              type=\"text\"\n              defaultValue={user.name}\n              className=\"inputs__input\"\n              placeholder=\"имя пользователя\"\n              onChange={e => setName(e.target.value)}\n            />\n          </label>\n          <label className=\"label\">\n            <span>Фамилия:</span>\n            <input\n              type=\"text\"\n              defaultValue={user.surname}\n              className=\"inputs__input\"\n              placeholder=\"фамилия пользователя\"\n              onChange={e => setSurname(e.target.value)}\n            />\n          </label>\n          <label className=\"label\">\n            <span>Моб. телефон:</span>\n            <input\n              type=\"telephone\"\n              defaultValue={user.phoneNumber}\n              className=\"inputs__input\"\n              placeholder=\"моб. номер пользователя\"\n              onChange={e => setPhoneNumber(e.target.value)}\n            />\n          </label>\n          <label className=\"label\">\n            <span>Is active:</span>\n            <select\n              className=\"inputs__input\"\n              defaultValue={user.isActive}\n              onChange={e => setIsActive(e.target.value)}\n            >\n              <option value=\"active\">Active</option>\n              <option value=\"inactive\">Inactive</option>\n\n            </select>\n          </label>\n          <NavLink\n            className=\"submit-button button\"\n            to=\"/users\"\n            onClick={() => editUser({ \n              name: name || user.name,\n              surname: surname || user.surname,\n              phoneNumber: phoneNumber || user.phoneNumber,\n              isActive: isActive,\n            }, user.id)}\n          >\n            Редактировать\n          </NavLink>\n          <NavLink\n            className=\"close-button button\"\n            to=\"/users\"\n            onClick={() => inputsReset()}\n          >\n            Отмена\n          </NavLink>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  isActive: selectors.getActionStatus(state),\n  name: selectors.getName(state),\n  surname: selectors.getSurname(state),\n  phoneNumber: selectors.getPhoneNumber(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  setPhoneNumber: value => dispatch(inputActions.setPhoneNumber(value)),\n  setName: value => dispatch(inputActions.setName(value)),\n  setSurname: value => dispatch(inputActions.setSurname(value)),\n  setIsActive: value => dispatch(inputActions.setIsActive(value)),\n  editUser: (value, id) => dispatch(editUser(value, id)),\n  inputsReset: () => dispatch(inputActions.inputsReset()),\n});\n\nEditForm.propTypes={\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    surname: PropTypes.string.isRequired,\n    phoneNumber: PropTypes.string.isRequired,\n    isActive: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n  name: PropTypes.string.isRequired,\n  surname: PropTypes.string.isRequired,\n  phoneNumber: PropTypes.string.isRequired,\n  isActive: PropTypes.string.isRequired,\n  setIsActive: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  setPhoneNumber: PropTypes.func.isRequired,\n  setSurname: PropTypes.func.isRequired,\n  editUser: PropTypes.func.isRequired,\n  inputsReset: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditForm);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport UsersData from './UsersData';\nimport EditForm from './EditForm';\nimport { getName } from '../store/selectors';\n\nconst User = ({ \n  user,\n  headers\n}) => (\n  <>\n    {headers.map(({ title, value }) => (\n      <React.Fragment key={title}>\n        {title !== 'свойства'\n          ? (\n            <td>\n              {user[value]}\n            </td>\n          ) : (\n            <td>\n              <NavLink\n                className=\"link\"\n                to={`/users/${user.id}`}\n                key={user[value]}\n              >\n                <span \n                  className=\"tool-icon\" \n                  role=\"img\"\n                  aria-label=\"eye\"\n                >\n                    👁️‍🗨️\n                </span>\n              </NavLink>\n              {user.name && (\n                <Route\n                  path={`/users/${user.id}`}\n                  render={() => (\n                    <UsersData user={user} />\n                  )}\n                />\n              )}\n              <NavLink\n                className=\"link\"\n                to={`/users/${user.id}/edit`}\n                key={user[value]}\n              >\n                <span \n                  className=\"tool-icon\" \n                  role=\"img\"\n                  aria-label=\"edit-file\"\n                >\n                  &#128221;\n                </span>\n              </NavLink>\n              <Route\n                path={`/users/${user.id}/edit`}\n                render={() => (\n                  <EditForm header={title} user={user} />\n                )}\n              />\n            </td>\n          )\n        }\n      </React.Fragment>\n    ))}\n  </>\n);\n\n\n\nconst mapStateToProps = state => ({\n  name: getName(state),\n});\n\nUser.propTypes = {\n  headers: PropTypes.arrayOf(PropTypes.object).isRequired,\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    surname: PropTypes.string.isRequired,\n    phoneNumber: PropTypes.string.isRequired,\n    isActive: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n};\n\nexport default connect(mapStateToProps)(User);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { togglePopup } from '../store/reducers/popupReducer';\nimport { filterUsers } from '../store/reducers/usersReducer';\nimport * as selectors  from '../store/selectors';\nimport { showUsers } from '../store/thunks'\nimport RegisterForm from './RegistrationForm';\nimport User from './User';\n\nconst UsersTable = ({\n  isPopupShown,\n  togglePopup,\n  users,\n  filterUsers,\n  filter,\n  showUsers,\n}) => {\n\n  useEffect(\n    () => {\n      showUsers(filter)\n    }, [showUsers, filter, isPopupShown]\n  )\n\n  const headers = [\n    {\n      title: 'имя', value: 'name',\n    },\n    {\n      title: 'фамилия', value: 'surname',\n    },\n    {\n      title: 'номер телефона', value: 'phoneNumber',\n    },\n    {\n      title: 'состояние', value: 'isActive',\n    },\n    {\n      title: 'свойства', value: null,\n    },\n  ];\n\n  return (\n    <>\n      {isPopupShown && (\n        <RegisterForm />\n      )}\n      <button\n        type=\"button\"\n        className=\"button register-button\"\n        onClick={togglePopup}\n      >\n        Зарегистрировать пользователя\n      </button>\n      <div className='filter-buttons'>\n      <button\n        type=\"button\"\n        className=\"filter-buttons__button button\"\n        onClick={() => filterUsers('all')}\n      >\n        All\n      </button>\n      <button\n        type=\"button\"\n        className=\"filter-buttons__button button\"\n        onClick={() => filterUsers('active')}\n      >\n        Active\n      </button>\n      <button\n        type=\"button\"\n        className=\"filter-buttons__button button\"\n        onClick={() => filterUsers('inactive')}\n      >\n        Inactive\n      </button>\n      </div>\n      <table className=\"users-list\">\n        <thead className=\"users-list__header\">\n          <tr>\n            {headers.map(({ title, value }) => (\n              <td\n                key={value}\n                role=\"presentation\"\n                className=\"users-list__table-column\"\n              >\n                {title}\n              </td>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {users.map(user => (\n            <tr \n              className=\"users-list__user\" \n              key={user.id}\n            >\n              <User user={user} headers={headers} />\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isPopupShown: selectors.getShowPopup(state),\n  name: selectors.getName(state),\n  surname: selectors.getSurname(state),\n  phoneNumber: selectors.getPhoneNumber(state),\n  isActive: selectors.getActionStatus(state),\n  users: selectors.getUsers(state),\n  filter: selectors.getIsFiltered(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  togglePopup: () => dispatch(togglePopup()),\n  filterUsers: value => dispatch(filterUsers(value)),\n  showUsers: value => dispatch(showUsers(value)),\n});\n\nUsersTable.propTypes = {\n  isPopupShown: PropTypes.bool.isRequired,\n  togglePopup: PropTypes.func.isRequired,\n  users: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filterUsers: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  showUsers: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersTable);\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport inputReducer from './reducers/inputReducer';\nimport userReducer from './reducers/userReducer';\nimport usersReducer  from './reducers/usersReducer';\nimport popupReducer from './reducers/popupReducer';\n\nconst reducer = combineReducers({\n  input: inputReducer,\n  users: usersReducer,\n  user: userReducer,\n  popup: popupReducer,\n});\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { Route, HashRouter, Switch, Link } from 'react-router-dom';\nimport UsersTable from '../src/components/UsersTable';\nimport './styles/index.scss';\nimport { store } from '../src/store';\n\nconst App = () => (\n  <div className=\"App\">\n    <Provider store={store}>\n      <HashRouter>\n        <Switch>\n          <Route\n            path=\"/users\"\n            render={() => (\n              <UsersTable />\n            )}\n          />\n          <Route path=\"/\">\n            <Link\n              className=\"init-button button\"\n              to=\"/users\"\n            >\n              SHOW USERS LIST\n            </Link>\n          </Route>\n        </Switch>\n      </HashRouter>\n    </Provider>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport firebase from 'firebase/app';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC4OJ8G4-CN4RCwKHPTe32UR2i8kxvpq5g\",\n    authDomain: \"userlistapp-test.firebaseapp.com\",\n    databaseURL: \"https://userlistapp-test.firebaseio.com\",\n    projectId: \"userlistapp-test\",      \n    storageBucket: \"userlistapp-test.appspot.com\",\n    messagingSenderId: \"102863790993\",\n    appId: \"1:102863790993:web:41b152851507623482f030\"\n  };\n\n  firebase.initializeApp(firebaseConfig);\n  export const userRef = firebase.database().ref().child('users');\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}